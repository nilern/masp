;;; FIXME: error checking all around!!!
;;; TODO: @begin and @do

;; (@def @def
;;   (@op (name expr) env
;;     (#%cont/env ()
;;       (assoc env name (eval expr env)))))
(#%cont/env ()
  (#%extend ((#@op get-env #_ env env))
            ((#@op id-op operands #_ (#%head operands)) @def)
            (#@op @def operands env
              (#%cont/env ()
                (#%extend env (#%head operands)
                          (#%eval (#%head (#%tail operands)) env))))))

(@def @def!
  (#@op @def! operands env
    (#%cont/env ()
      (#%claim! env (#%head operands)
                (#%eval (#%head (#%tail operands)) env)))))

(@def @declare
  (#@op @declare names env
    (#%cont/env ()
      (#%reserve env names))))

;; TODO: pattern matching (pretty much a nop right now):
(@def @op* #@op)

;; (@def @op
;;   (@op* @op operands env
;;     (eval (list* @op* #_ operands) env)))
(@def @op
  (@op* @op operands env
    (#%eval (#%cons @op* (#%cons #_ operands)) env)))

;; (@def @fn*
;;   (@op* @fn* (self formals & body) env
;;     (wrap (eval (list* @op* self formals #_ body) env))))
(@def @fn*
  (@op* @fn* operands env
    (#%wrap (#%eval (#%cons @op*
                      (#%cons (#%head operands)
                        (#%cons (#%head (#%tail operands))
                          (#%cons #_ (#%tail (#%tail operands))))))
                    env))))

;; (@def @fn
;;   (@op* @fn operands env
;;     (eval (list* @fn* #_ operands) env)))
(@def @fn
  (@op* @fn operands env
    (#%eval (#%cons @fn* (#%cons #_ operands)) env)))

;; (@def @if
;;   (@op (cond then else) env
;;     (eval ((#%tval (eval cond env)) then else) env)))
(@def @if
  (@op* @if operands env
    (#%eval ((#%tval (#%eval (#%head operands) env))
             (#%head (#%tail operands))
             (#%head (#%tail (#%tail operands))))
            env)))

;; TODO: vector and map evaluation
;; (@def eval* (@fn (expr env) expr))
(@def eval* (@fn args (#%head args)))

;; (@def combine*
;;   (@fn (op operand)
;;     (@if (continuation? op)
;;       (#%throw op operand)
;;       (#%err op))))
(@def combine*
  (@fn args
    (@if (#%cont? (#%head args))
      (#%throw (#%head args) (#%head (#%tail args)))
      (#%err (#%head args)))))

23
